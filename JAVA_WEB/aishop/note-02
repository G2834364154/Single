用户模块
1.用户注册

2.用户激活
    ①自己搭建邮件服务器，本公司可用，也可以外发！！！
    ②注意
        1.安装：傻瓜式，直接下一步即可！！
        2.设置--》邮箱域名设置，域名随便写！！！！！
     ③邮箱激活的过程：
        1.发送一封激活邮件，且邮件内容的链接中，待着我们的db中某条记录的激活码[字段值]
        2.使用请求获取到激活码的值
        3.根据2的值去db查询
            若有这个人，将status=1
            若没有这个人，压根没注册过！！！
        4.若status修改成功之后，之前的那个激活码，没啥鸟用，置空

3.用户登录
    不光要用户名和密码，state=1

4.用户退出
    略

5.自动登录
    Filter部分内容

6.Ajax校验用户名
    略

7.记住用户名
    跟自动类似，还不一样，使用Cookie完成！！！！

8.版本控制工具 Git
    1.前提：
        Git Git-2.21.0-64-bit.exe
        可以使用git的一些命令进行交互
    2.作用
        ①期望能够追溯每个版本的变更历史
        ②期望能够追溯到文件的修改人，以及修改时间.....
            追责
        ③开一个分支，在某个版本的基础之上，进行其他功能的开发，不影响原有版本
        ④不可能一个人单独独斗，多人开发，如何合并代码，也需要版本控制工具，帮我们搞定

    3.常用的版本控制工具有哪些？
        1.Git : 目前最主流的一个，一般跟互联网项目搭边的基本都用
        2.SVN：传统的一些项目，小型项目，小公司[不绝对]

    4.Git vs SVN
        共同点：上述的几个作用，都差不多
        主要区别：
            SVN：集中式的版本控制工具，若没有网络，提交不了代码
                大部分是局域网内部，内部一个团体再搞
            Git：分布式的版本控制工具
                有没有网都可以提交！！
                    若没有网：在本地提交！！！！
                    若有网，先本地提交，在push上去！！！
                可以全球一起干！！！那些开源项目，基本都是全球各地人一起干的！！！！
                    源码，都在github上！！！！

        5.Git的基本使用
        注意：提交，必须加上，修改说明！！！！！！
        本地----》远程
            1.初始化一个仓库：git init
            2.将文件纳入仓库，放入暂存区：git add
            3.将文件纳入版本控制：git commit
            4.向服务器推送代码：git push
          注意：在使用码云，或者github的时候
            在创建仓库的时候，不要加README.md，否则可能本地推送到远程会失败！！！！！

        远程---》本地
            1.git clone 地址
            2.本地操作

        6.关于客户端工具
            tortoisegit 或者 tortoisesvn
            简化你记不住命令！！！！！！傻瓜式的操作！！！！！

           VisualSVN Server：服务端
            可视化操作，可以创建用户、仓库、为某个仓库添加访问权限

            对于客户端：使用IDEA、小乌龟tortoisesvn

作业：
    1.装SVN自己玩
       服务端： VisualSVN Server
       客户端： TortoiseSVN

    2.用户激活
      自动登录
      校验用户名是否存在

    3.预习

